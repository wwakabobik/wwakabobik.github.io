<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>wwakabobik's lair - vercel</title><link href="https://wwakabobik.github.io/" rel="alternate"/><link href="https://wwakabobik.github.io/feeds/vercel.tag.atom.xml" rel="self"/><id>https://wwakabobik.github.io/</id><updated>2025-09-26T20:58:35.188725+02:00</updated><entry><title>Adding Tests to Vercel</title><link href="https://wwakabobik.github.io/2024/11/adding_tests_to_vercel/" rel="alternate"/><published>2024-11-06T20:28:00+01:00</published><updated>2025-09-26T20:58:35.188725+02:00</updated><author><name>wwakabobik</name></author><id>tag:wwakabobik.github.io,2024-11-06:/2024/11/adding_tests_to_vercel/</id><summary type="html">&lt;p class="first last"&gt;Adding automated tests to your Vercel project can be quick and efficient. Here's a two-path guide to integrating tests using GitHub Actions or Vercel's Checks.&lt;/p&gt;
</summary><content type="html">&lt;blockquote class="pull-quote"&gt;
This is my original article (published May 2023), translated from a &lt;a class="reference external" href="https://habr.com/en/users/wwakabobik/"&gt;Habrahabr&lt;/a&gt;. I decided to remove all old articles from it and store it only in my personal blog because I don't like moral position of Habr audience.&lt;/blockquote&gt;
&lt;p&gt;Good day to all developers, engineers, and automators who stumbled upon this guide. If your project is running on &lt;a class="reference external" href="https://vercel.com/"&gt;Vercel&lt;/a&gt; and you've dabbled in automation, then this quick guide is right up your alley.&lt;/p&gt;
&lt;p&gt;The story is short and sweet, much like most things in &lt;a class="reference external" href="https://vercel.com/"&gt;Vercel&lt;/a&gt; – adding your automated tests is straightforward and quick. And yes, there are two ways to go about it.&lt;/p&gt;
&lt;div class="section" id="using-github-actions"&gt;
&lt;h2&gt;Using GitHub Actions&lt;/h2&gt;
&lt;p&gt;Original reference &lt;a class="reference external" href="https://vercel.com/guides/how-can-i-run-end-to-end-tests-after-my-vercel-preview-deployment"&gt;here&lt;/a&gt; if you want to go into the weeds. This method is ideal if you already have a solid foundation of automated tests or if you’re using &lt;a class="reference external" href="https://www.selenium.dev/"&gt;Selenium&lt;/a&gt;, &lt;a class="reference external" href="https://www.cypress.io/"&gt;Cypress&lt;/a&gt;, or similar frameworks (but not &lt;a class="reference external" href="https://mochajs.org/"&gt;Mocha&lt;/a&gt;, &lt;a class="reference external" href="https://pptr.dev/"&gt;Puppeteer&lt;/a&gt;, or &lt;a class="reference external" href="https://playwright.dev/"&gt;Playwright&lt;/a&gt; – we’re talking the heavier hitters here). All is powered by &lt;a class="reference external" href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;. All you need is to add or update a file in your project’s directory: &lt;strong&gt;.github/workflows/e2e.yml&lt;/strong&gt; (name it whatever suits your fancy, as long as it aligns with the tests you’re running).:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;E2E Tests&lt;/span&gt;

&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;deployment_status&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

&lt;span class="nt"&gt;jobs&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;e2e-tests&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;runs-on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ubuntu-latest&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;github.event.deployment_status.state == &amp;#39;success&amp;#39;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;steps&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Checkout&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/checkout@v2&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Setup Node.js&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/setup-node@v2&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;node-version&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;18&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install pnpm&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;curl -fsSL https://get.pnpm.io/install.sh | env PNPM_VERSION=9.12.3 sh - | node - add --global pnpm&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Install dependencies&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pnpm install&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Run E2E tests&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;if [ &amp;quot;${{ env.VERCEL_ENV }}&amp;quot; != &amp;quot;production&amp;quot; ]; then&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="no"&gt;my_param=&amp;quot;qa&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="no"&gt;my_param=&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;fi&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="no"&gt;npx cypress run --config-file &amp;quot;cypress.config.ts&amp;quot; --config specPattern=&amp;quot;cypress/e2e&amp;quot; baseUrl=${{ github.event.deployment_status.target_url }} --env nice_param=$my_param allure=true --spec &amp;quot;cypress/e2e/base.cy.js,cypress/e2e/meta.cy.js&amp;quot;&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;continue-on-error&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;true&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;e2e_tests&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Generate Allure report&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;always()&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;pnpm run allure:generate allure-results&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Archive Allure report&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;zip -r allure-report.zip allure-report&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Upload Allure report&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;uses&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;actions/upload-artifact@v2&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;with&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;allure-report&lt;/span&gt;
&lt;span class="w"&gt;          &lt;/span&gt;&lt;span class="nt"&gt;path&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;allure-report.zip&lt;/span&gt;

&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Check test status (finally)&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ steps.e2e_tests.outcome == &amp;#39;failure&amp;#39; }}&lt;/span&gt;
&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nt"&gt;run&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;exit 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You could replace &lt;a class="reference external" href="https://www.cypress.io/"&gt;Cypress&lt;/a&gt; with anything else you’re using – &lt;a class="reference external" href="https://docs.pytest.org/en/stable/"&gt;pytest&lt;/a&gt;/&lt;a class="reference external" href="https://www.selenium.dev/"&gt;Selenium&lt;/a&gt;, for instance – and set up the environment with something like &lt;a class="reference external" href="https://tox.wiki/en/latest/"&gt;tox&lt;/a&gt;. Or, if you’re feeling adventurous, go ahead and trigger a third-party service or webhook. Here are a few things to note:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;if&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;github.event.deployment_status.state == &amp;#39;success&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Tests will only run if the deployment is successful (courtesy of a webhook trigger).&lt;/li&gt;
&lt;li&gt;You’ll likely want to customize tests or parameters based on the environment being deployed. In this example, if the deployment isn't for production, we add the &amp;quot;my_param&amp;quot; parameter, which will be picked up by the tests. The &lt;a class="reference external" href="https://vercel.com/"&gt;Vercel&lt;/a&gt; environment itself is available through the &lt;strong&gt;env.VERCEL_ENV&lt;/strong&gt; variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;if [ &amp;quot;${{ env.VERCEL_ENV }}&amp;quot; != &amp;quot;production&amp;quot; ]; then&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my_param=&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;else&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;my_param=&amp;quot;qa&amp;quot;&lt;/span&gt;
&lt;span class="l l-Scalar l-Scalar-Plain"&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The base URL (base_url) for testing lives in a variable as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;${{ github.event.deployment_status.target_url }}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You can also add different tests or reports to various steps, such as using &lt;a class="reference external" href="https://docs.qameta.io/allure/"&gt;Allure-reports&lt;/a&gt; for test results. Upon completion, you’ll see the results in GitHub Actions (unless, of course, you’re calling in a heavy-duty service like &lt;a class="reference external" href="https://www.jenkins.io/"&gt;Jenkins&lt;/a&gt; or some cloud testing platform).&lt;/p&gt;
&lt;img alt="GitHub actions" src="/assets/images/articles/qa/adding_tests_to_vercel/01_vercel_ga.png" /&gt;
&lt;p&gt;A detailed log will show up here:&lt;/p&gt;
&lt;img alt="GitHub actions log" src="/assets/images/articles/qa/adding_tests_to_vercel/02_vercel_log.png" /&gt;
&lt;p&gt;Report will be stored in &lt;strong&gt;Actions -&amp;gt; Run -&amp;gt; Summary -&amp;gt; Artifacts&lt;/strong&gt;:&lt;/p&gt;
&lt;img alt="Allure report" src="/assets/images/articles/qa/adding_tests_to_vercel/03_vercel_allure.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="using-checks"&gt;
&lt;h2&gt;Using Checks&lt;/h2&gt;
&lt;p&gt;Alternatively, you can run checks directly within the Vercel deployment workflow via the &lt;strong&gt;Checks&lt;/strong&gt; action. Write your own plugin (&lt;a class="reference external" href="https://vercel.com/docs/integrations/create-integration"&gt;Integration&lt;/a&gt;) to check your deployment with the &lt;a class="reference external" href="https://vercel.com/docs/integrations/checks-overview"&gt;Checks API&lt;/a&gt;, or use an existing one like &lt;a class="reference external" href="https://www.checklyhq.com/"&gt;Checkly&lt;/a&gt;:&lt;/p&gt;
&lt;img alt="Checkly" src="/assets/images/articles/qa/adding_tests_to_vercel/04_vercel_checkly.png" /&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.checklyhq.com/"&gt;Checkly&lt;/a&gt; operates with &lt;a class="reference external" href="https://playwright.dev/"&gt;Playwright&lt;/a&gt; tests, offering a base level of checks out of the box, which you can expand upon with your own tests:&lt;/p&gt;
&lt;img alt="Playwright tests on Checkly" src="/assets/images/articles/qa/adding_tests_to_vercel/05_vercel_playwright.png" /&gt;
&lt;p&gt;During deployment, these tests will run as a separate step, with results generated accordingly:&lt;/p&gt;
&lt;img alt="Checkly testing results" src="/assets/images/articles/qa/adding_tests_to_vercel/06_vercel_results.png" /&gt;
&lt;/div&gt;
&lt;div class="section" id="in-conclusion"&gt;
&lt;h2&gt;In Conclusion&lt;/h2&gt;
&lt;p&gt;As you can see, adding tests to Vercel projects is simple and fast.&lt;/p&gt;
&lt;p&gt;That’s all, folks. If this guide has been a useful addition to your automation toolkit, feel free to like the post, drop a comment, or, if you’re feeling particularly generous, &lt;a class="reference external" href="https://www.donationalerts.com/r/rocketsciencegeek"&gt;throw a coin&lt;/a&gt; my way.&lt;/p&gt;
&lt;/div&gt;
</content><category term="qa"/><category term="qa"/><category term="vercel"/><category term="ci"/><category term="github actions"/><category term="devops"/></entry></feed>